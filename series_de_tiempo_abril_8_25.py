# -*- coding: utf-8 -*-
"""Series de Tiempo Abril 8 25

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xDbLILILBcFqM8Er4BMwfaL1lTMAk__T
"""

import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.graphics.tsaplots import plot_acf
from datetime import datetime

# Define the stocks and time period
tickers = ['AAPL', 'NVDA', 'AMZN']
start_date = '2019-11-29'
end_date = datetime.today().strftime('%Y-%m-%d')

# Fetch historical data
print("Fetching data...")
data = yf.download(tickers, start=start_date, end=end_date, auto_adjust=True)
print("Data columns:", data.columns)  # Debug: Check column names

# Check if data was fetched successfully
if data.empty or not all(('Close', ticker) in data.columns for ticker in tickers):
    raise ValueError("Failed to fetch data for one or more tickers. Please check ticker symbols or internet connection.")

# Parameters for random walk
n_steps = 252  # Number of trading days to simulate (approx 1 year)

# Function to simulate random walk with unit root
def random_walk_unit_root(start_price, n_steps, volatility):
    # Random steps based on historical volatility (daily)
    steps = np.random.normal(0, volatility, n_steps)
    # Cumulative sum for random walk (unit root process)
    walk = start_price + np.cumsum(steps)
    return walk

# Plotting setup
fig = plt.figure(figsize=(15, 12))
fig.suptitle('Random Walk Simulations and Correlograms from Nov 29, 2019', fontsize=16)

# Simulate and analyze for each stock
for i, ticker in enumerate(tickers):
    # Get starting price and historical volatility
    start_price = data[('Close', ticker)].iloc[0]
    historical_volatility = data[('Close', ticker)].pct_change().std()  # Daily volatility

    # Simulate random walk
    rw = random_walk_unit_root(start_price, n_steps, historical_volatility)

    # Time axis for random walk
    dates = pd.date_range(start=start_date, periods=n_steps, freq='B')

    # Plot random walk (left subplot)
    plt.subplot(3, 2, 2*i + 1)
    plt.plot(dates, rw, label=f'{ticker} Random Walk', color='blue')
    plt.axhline(y=start_price, color='red', linestyle='--', label='Starting Price')
    plt.title(f'{ticker} Random Walk')
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.legend()
    plt.xticks(rotation=45)

    # Plot correlogram (right subplot)
    plt.subplot(3, 2, 2*i + 2)
    plot_acf(rw, ax=plt.gca(), lags=20, title=f'{ticker} Correlogram')

plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.show()

# Print results for explanation
for ticker in tickers:
    start_price = data[('Close', ticker)].iloc[0]
    historical_volatility = data[('Close', ticker)].pct_change().std() * np.sqrt(252)  # Annualized volatility
    print(f"\nResults for {ticker}:")
    print(f"Starting Price (Nov 29, 2019): ${start_price:.2f}")
    print(f"Annualized Historical Volatility: {historical_volatility:.2%}")